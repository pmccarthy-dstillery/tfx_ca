apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: tfxca-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.1.1, pipelines.kubeflow.org/pipeline_compilation_time: '2020-12-04T20:42:13.386427',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Constructs a Kubeflow
      pipeline.", "inputs": [{"default": "gs://tfxca-pipeline-artifacts", "name":
      "pipeline-root"}, {"default": "meni|avw2", "name": "seed_pattern"}], "name":
      "tfxca"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.1.1}
spec:
  entrypoint: tfxca
  templates:
  - name: bigqueryexamplegen
    container:
      args:
      - --pipeline_name
      - tfxca
      - --pipeline_root
      - '{{inputs.parameters.pipeline-root}}'
      - --kubeflow_metadata_config
      - |-
        {
          "grpc_config": {
            "grpc_service_host": {
              "environment_variable": "METADATA_GRPC_SERVICE_HOST"
            },
            "grpc_service_port": {
              "environment_variable": "METADATA_GRPC_SERVICE_PORT"
            }
          }
        }
      - --beam_pipeline_args
      - '["--temp_location=gs://pjm_interactive_tmp", "--project=dst-mlpipes"]'
      - --additional_pipeline_args
      - '{}'
      - --component_launcher_class_path
      - tfx.orchestration.launcher.in_process_component_launcher.InProcessComponentLauncher
      - --serialized_component
      - '{"__class__": "NodeWrapper", "__module__": "tfx.orchestration.kubeflow.node_wrapper",
        "__tfx_object_type__": "jsonable", "_exec_properties": {"custom_config": "{\n  \"custom_config\":
        {\n    \"@type\": \"bigqueryseed.dstillery.com/tfx_ca.bigquery_example_gen.BigQuerySeed\",\n    \"seed\":
        \"{{inputs.parameters.seed_pattern}}\"\n  }\n}", "input_config": "{\n  \"splits\":
        [\n    {\n      \"name\": \"single_split\",\n      \"pattern\": \"with labeled
        as (\\n    select deviceid, \\n    devicetype, \\n    case when regexp_contains(content,\\\"{{inputs.parameters.seed_pattern}}\\\")
        then 1 else 0 end as label,\\n    content\\n  from tfx_ca.visitdata\\n), \\npositives
        as (\\n  select deviceid,\\n    devicetype,\\n    label,\\n    content    \\n  from
        labeled\\n  where label = 1\\n  limit 100000\\n),\\nnegatives as (\\n  select
        deviceid,\\n    devicetype,\\n    label,\\n    content\\n  from labeled\\n  where
        label = 0\\n  limit 900000\\n),\\n\\npositives_ranked as (\\n  select label,\\n  content,\\n  (rank()
        over(order by rand()))*9+.5 as rnk\\n  from positives\\n),\\n\\nnegatives_ranked
        as (\\n  select label,\\n  content,\\n  (rank() over(order by rand())) as
        rnk\\n  from negatives\\n)\\n\\nselect label, content, rnk from \\n(select
        label, content, rnk \\nfrom positives_ranked) \\n\\nunion all \\n\\n(select
        label, content, rnk \\nfrom negatives_ranked)\\norder by rnk\"\n    }\n  ]\n}",
        "output_config": "{\n  \"split_config\": {\n    \"splits\": [\n      {\n        \"hash_buckets\":
        2,\n        \"name\": \"train\"\n      },\n      {\n        \"hash_buckets\":
        1,\n        \"name\": \"eval\"\n      }\n    ]\n  }\n}"}, "_id": "BigQueryExampleGen",
        "_inputs": {"__class__": "_PropertyDictWrapper", "__module__": "tfx.types.node_common",
        "__tfx_object_type__": "jsonable", "_compat_aliases": {}, "_data": {}}, "_outputs":
        {"__class__": "_PropertyDictWrapper", "__module__": "tfx.types.node_common",
        "__tfx_object_type__": "jsonable", "_compat_aliases": {}, "_data": {"examples":
        {"__class__": "Channel", "__module__": "tfx.types.channel", "__tfx_object_type__":
        "jsonable", "artifacts": [], "output_key": "examples", "producer_component_id":
        "BigQueryExampleGen", "type": {"name": "Examples", "properties": {"span":
        "INT", "split_names": "STRING", "version": "INT"}}}}}, "_type": "tfx_ca.bigquery_example_gen.component.BigQueryExampleGen",
        "driver_class": {"__class__": "BaseDriver", "__module__": "tfx.dsl.components.base.base_driver",
        "__tfx_object_type__": "class"}, "executor_spec": {"__class__": "ExecutorClassSpec",
        "__module__": "tfx.dsl.components.base.executor_spec", "__tfx_object_type__":
        "jsonable", "executor_class": {"__class__": "Executor", "__module__": "tfx_ca.bigquery_example_gen.executor",
        "__tfx_object_type__": "class"}, "extra_flags": ["--temp_location=gs://pjm_interactive_tmp",
        "--project=dst-mlpipes"]}}'
      - --component_config
      - 'null'
      - --enable_cache
      command: [python, /tfx-src/tfx/orchestration/kubeflow/container_entrypoint.py]
      env:
      - name: WORKFLOW_ID
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''workflows.argoproj.io/workflow'']'}
      - name: KFP_POD_NAME
        valueFrom:
          fieldRef: {fieldPath: metadata.name}
      - name: KFP_NAMESPACE
        valueFrom:
          fieldRef: {fieldPath: metadata.namespace}
      envFrom:
      - configMapRef: {name: metadata-grpc-configmap, optional: true}
      image: gcr.io/dst-mlpipes/tfx_ca:latest
    inputs:
      parameters:
      - {name: pipeline-root}
      - {name: seed_pattern}
    outputs:
      artifacts:
      - {name: mlpipeline-ui-metadata, path: /mlpipeline-ui-metadata.json}
    metadata:
      labels:
        add-pod-env: "true"
        pipelines.kubeflow.org/pipeline-sdk-type: tfx
  - name: examplevalidator
    container:
      args:
      - --pipeline_name
      - tfxca
      - --pipeline_root
      - '{{inputs.parameters.pipeline-root}}'
      - --kubeflow_metadata_config
      - |-
        {
          "grpc_config": {
            "grpc_service_host": {
              "environment_variable": "METADATA_GRPC_SERVICE_HOST"
            },
            "grpc_service_port": {
              "environment_variable": "METADATA_GRPC_SERVICE_PORT"
            }
          }
        }
      - --beam_pipeline_args
      - '["--temp_location=gs://pjm_interactive_tmp", "--project=dst-mlpipes"]'
      - --additional_pipeline_args
      - '{}'
      - --component_launcher_class_path
      - tfx.orchestration.launcher.in_process_component_launcher.InProcessComponentLauncher
      - --serialized_component
      - '{"__class__": "NodeWrapper", "__module__": "tfx.orchestration.kubeflow.node_wrapper",
        "__tfx_object_type__": "jsonable", "_exec_properties": {"exclude_splits":
        "[]"}, "_id": "ExampleValidator", "_inputs": {"__class__": "_PropertyDictWrapper",
        "__module__": "tfx.types.node_common", "__tfx_object_type__": "jsonable",
        "_compat_aliases": {"stats": "statistics"}, "_data": {"schema": {"__class__":
        "Channel", "__module__": "tfx.types.channel", "__tfx_object_type__": "jsonable",
        "artifacts": [], "output_key": "schema", "producer_component_id": "SchemaGen",
        "type": {"name": "Schema"}}, "statistics": {"__class__": "Channel", "__module__":
        "tfx.types.channel", "__tfx_object_type__": "jsonable", "artifacts": [], "output_key":
        "statistics", "producer_component_id": "StatisticsGen", "type": {"name": "ExampleStatistics",
        "properties": {"span": "INT", "split_names": "STRING"}}}}}, "_outputs": {"__class__":
        "_PropertyDictWrapper", "__module__": "tfx.types.node_common", "__tfx_object_type__":
        "jsonable", "_compat_aliases": {"output": "anomalies"}, "_data": {"anomalies":
        {"__class__": "Channel", "__module__": "tfx.types.channel", "__tfx_object_type__":
        "jsonable", "artifacts": [], "output_key": "anomalies", "producer_component_id":
        "ExampleValidator", "type": {"name": "ExampleAnomalies", "properties": {"span":
        "INT", "split_names": "STRING"}}}}}, "_type": "tfx.components.example_validator.component.ExampleValidator",
        "driver_class": {"__class__": "BaseDriver", "__module__": "tfx.dsl.components.base.base_driver",
        "__tfx_object_type__": "class"}, "executor_spec": {"__class__": "ExecutorClassSpec",
        "__module__": "tfx.dsl.components.base.executor_spec", "__tfx_object_type__":
        "jsonable", "executor_class": {"__class__": "Executor", "__module__": "tfx.components.example_validator.executor",
        "__tfx_object_type__": "class"}, "extra_flags": ["--temp_location=gs://pjm_interactive_tmp",
        "--project=dst-mlpipes"]}}'
      - --component_config
      - 'null'
      - --enable_cache
      command: [python, /tfx-src/tfx/orchestration/kubeflow/container_entrypoint.py]
      env:
      - name: WORKFLOW_ID
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''workflows.argoproj.io/workflow'']'}
      - name: KFP_POD_NAME
        valueFrom:
          fieldRef: {fieldPath: metadata.name}
      - name: KFP_NAMESPACE
        valueFrom:
          fieldRef: {fieldPath: metadata.namespace}
      envFrom:
      - configMapRef: {name: metadata-grpc-configmap, optional: true}
      image: gcr.io/dst-mlpipes/tfx_ca:latest
    inputs:
      parameters:
      - {name: pipeline-root}
    outputs:
      artifacts:
      - {name: mlpipeline-ui-metadata, path: /mlpipeline-ui-metadata.json}
    metadata:
      labels:
        add-pod-env: "true"
        pipelines.kubeflow.org/pipeline-sdk-type: tfx
  - name: pusher
    container:
      args:
      - --pipeline_name
      - tfxca
      - --pipeline_root
      - '{{inputs.parameters.pipeline-root}}'
      - --kubeflow_metadata_config
      - |-
        {
          "grpc_config": {
            "grpc_service_host": {
              "environment_variable": "METADATA_GRPC_SERVICE_HOST"
            },
            "grpc_service_port": {
              "environment_variable": "METADATA_GRPC_SERVICE_PORT"
            }
          }
        }
      - --beam_pipeline_args
      - '["--temp_location=gs://pjm_interactive_tmp", "--project=dst-mlpipes"]'
      - --additional_pipeline_args
      - '{}'
      - --component_launcher_class_path
      - tfx.orchestration.launcher.in_process_component_launcher.InProcessComponentLauncher
      - --serialized_component
      - '{"__class__": "NodeWrapper", "__module__": "tfx.orchestration.kubeflow.node_wrapper",
        "__tfx_object_type__": "jsonable", "_exec_properties": {"custom_config": "null",
        "push_destination": "{\n  \"filesystem\": {\n    \"base_directory\": \"gs://tfxca-model-serving\"\n  }\n}"},
        "_id": "Pusher", "_inputs": {"__class__": "_PropertyDictWrapper", "__module__":
        "tfx.types.node_common", "__tfx_object_type__": "jsonable", "_compat_aliases":
        {"model_export": "model"}, "_data": {"model": {"__class__": "Channel", "__module__":
        "tfx.types.channel", "__tfx_object_type__": "jsonable", "artifacts": [], "output_key":
        "model", "producer_component_id": "Trainer", "type": {"name": "Model"}}}},
        "_outputs": {"__class__": "_PropertyDictWrapper", "__module__": "tfx.types.node_common",
        "__tfx_object_type__": "jsonable", "_compat_aliases": {"model_push": "pushed_model"},
        "_data": {"pushed_model": {"__class__": "Channel", "__module__": "tfx.types.channel",
        "__tfx_object_type__": "jsonable", "artifacts": [], "output_key": "pushed_model",
        "producer_component_id": "Pusher", "type": {"name": "PushedModel"}}}}, "_type":
        "tfx.components.pusher.component.Pusher", "driver_class": {"__class__": "BaseDriver",
        "__module__": "tfx.dsl.components.base.base_driver", "__tfx_object_type__":
        "class"}, "executor_spec": {"__class__": "ExecutorClassSpec", "__module__":
        "tfx.dsl.components.base.executor_spec", "__tfx_object_type__": "jsonable",
        "executor_class": {"__class__": "Executor", "__module__": "tfx.components.pusher.executor",
        "__tfx_object_type__": "class"}, "extra_flags": ["--temp_location=gs://pjm_interactive_tmp",
        "--project=dst-mlpipes"]}}'
      - --component_config
      - 'null'
      - --enable_cache
      command: [python, /tfx-src/tfx/orchestration/kubeflow/container_entrypoint.py]
      env:
      - name: WORKFLOW_ID
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''workflows.argoproj.io/workflow'']'}
      - name: KFP_POD_NAME
        valueFrom:
          fieldRef: {fieldPath: metadata.name}
      - name: KFP_NAMESPACE
        valueFrom:
          fieldRef: {fieldPath: metadata.namespace}
      envFrom:
      - configMapRef: {name: metadata-grpc-configmap, optional: true}
      image: gcr.io/dst-mlpipes/tfx_ca:latest
    inputs:
      parameters:
      - {name: pipeline-root}
    outputs:
      artifacts:
      - {name: mlpipeline-ui-metadata, path: /mlpipeline-ui-metadata.json}
    metadata:
      labels:
        add-pod-env: "true"
        pipelines.kubeflow.org/pipeline-sdk-type: tfx
  - name: schemagen
    container:
      args:
      - --pipeline_name
      - tfxca
      - --pipeline_root
      - '{{inputs.parameters.pipeline-root}}'
      - --kubeflow_metadata_config
      - |-
        {
          "grpc_config": {
            "grpc_service_host": {
              "environment_variable": "METADATA_GRPC_SERVICE_HOST"
            },
            "grpc_service_port": {
              "environment_variable": "METADATA_GRPC_SERVICE_PORT"
            }
          }
        }
      - --beam_pipeline_args
      - '["--temp_location=gs://pjm_interactive_tmp", "--project=dst-mlpipes"]'
      - --additional_pipeline_args
      - '{}'
      - --component_launcher_class_path
      - tfx.orchestration.launcher.in_process_component_launcher.InProcessComponentLauncher
      - --serialized_component
      - '{"__class__": "NodeWrapper", "__module__": "tfx.orchestration.kubeflow.node_wrapper",
        "__tfx_object_type__": "jsonable", "_exec_properties": {"exclude_splits":
        "[]", "infer_feature_shape": 0}, "_id": "SchemaGen", "_inputs": {"__class__":
        "_PropertyDictWrapper", "__module__": "tfx.types.node_common", "__tfx_object_type__":
        "jsonable", "_compat_aliases": {"stats": "statistics"}, "_data": {"statistics":
        {"__class__": "Channel", "__module__": "tfx.types.channel", "__tfx_object_type__":
        "jsonable", "artifacts": [], "output_key": "statistics", "producer_component_id":
        "StatisticsGen", "type": {"name": "ExampleStatistics", "properties": {"span":
        "INT", "split_names": "STRING"}}}}}, "_outputs": {"__class__": "_PropertyDictWrapper",
        "__module__": "tfx.types.node_common", "__tfx_object_type__": "jsonable",
        "_compat_aliases": {"output": "schema"}, "_data": {"schema": {"__class__":
        "Channel", "__module__": "tfx.types.channel", "__tfx_object_type__": "jsonable",
        "artifacts": [], "output_key": "schema", "producer_component_id": "SchemaGen",
        "type": {"name": "Schema"}}}}, "_type": "tfx.components.schema_gen.component.SchemaGen",
        "driver_class": {"__class__": "BaseDriver", "__module__": "tfx.dsl.components.base.base_driver",
        "__tfx_object_type__": "class"}, "executor_spec": {"__class__": "ExecutorClassSpec",
        "__module__": "tfx.dsl.components.base.executor_spec", "__tfx_object_type__":
        "jsonable", "executor_class": {"__class__": "Executor", "__module__": "tfx.components.schema_gen.executor",
        "__tfx_object_type__": "class"}, "extra_flags": ["--temp_location=gs://pjm_interactive_tmp",
        "--project=dst-mlpipes"]}}'
      - --component_config
      - 'null'
      - --enable_cache
      command: [python, /tfx-src/tfx/orchestration/kubeflow/container_entrypoint.py]
      env:
      - name: WORKFLOW_ID
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''workflows.argoproj.io/workflow'']'}
      - name: KFP_POD_NAME
        valueFrom:
          fieldRef: {fieldPath: metadata.name}
      - name: KFP_NAMESPACE
        valueFrom:
          fieldRef: {fieldPath: metadata.namespace}
      envFrom:
      - configMapRef: {name: metadata-grpc-configmap, optional: true}
      image: gcr.io/dst-mlpipes/tfx_ca:latest
    inputs:
      parameters:
      - {name: pipeline-root}
    outputs:
      artifacts:
      - {name: mlpipeline-ui-metadata, path: /mlpipeline-ui-metadata.json}
    metadata:
      labels:
        add-pod-env: "true"
        pipelines.kubeflow.org/pipeline-sdk-type: tfx
  - name: statisticsgen
    container:
      args:
      - --pipeline_name
      - tfxca
      - --pipeline_root
      - '{{inputs.parameters.pipeline-root}}'
      - --kubeflow_metadata_config
      - |-
        {
          "grpc_config": {
            "grpc_service_host": {
              "environment_variable": "METADATA_GRPC_SERVICE_HOST"
            },
            "grpc_service_port": {
              "environment_variable": "METADATA_GRPC_SERVICE_PORT"
            }
          }
        }
      - --beam_pipeline_args
      - '["--temp_location=gs://pjm_interactive_tmp", "--project=dst-mlpipes"]'
      - --additional_pipeline_args
      - '{}'
      - --component_launcher_class_path
      - tfx.orchestration.launcher.in_process_component_launcher.InProcessComponentLauncher
      - --serialized_component
      - '{"__class__": "NodeWrapper", "__module__": "tfx.orchestration.kubeflow.node_wrapper",
        "__tfx_object_type__": "jsonable", "_exec_properties": {"exclude_splits":
        "[]", "stats_options_json": null}, "_id": "StatisticsGen", "_inputs": {"__class__":
        "_PropertyDictWrapper", "__module__": "tfx.types.node_common", "__tfx_object_type__":
        "jsonable", "_compat_aliases": {"input_data": "examples"}, "_data": {"examples":
        {"__class__": "Channel", "__module__": "tfx.types.channel", "__tfx_object_type__":
        "jsonable", "artifacts": [], "output_key": "examples", "producer_component_id":
        "BigQueryExampleGen", "type": {"name": "Examples", "properties": {"span":
        "INT", "split_names": "STRING", "version": "INT"}}}}}, "_outputs": {"__class__":
        "_PropertyDictWrapper", "__module__": "tfx.types.node_common", "__tfx_object_type__":
        "jsonable", "_compat_aliases": {"output": "statistics"}, "_data": {"statistics":
        {"__class__": "Channel", "__module__": "tfx.types.channel", "__tfx_object_type__":
        "jsonable", "artifacts": [], "output_key": "statistics", "producer_component_id":
        "StatisticsGen", "type": {"name": "ExampleStatistics", "properties": {"span":
        "INT", "split_names": "STRING"}}}}}, "_type": "tfx.components.statistics_gen.component.StatisticsGen",
        "driver_class": {"__class__": "BaseDriver", "__module__": "tfx.dsl.components.base.base_driver",
        "__tfx_object_type__": "class"}, "executor_spec": {"__class__": "ExecutorClassSpec",
        "__module__": "tfx.dsl.components.base.executor_spec", "__tfx_object_type__":
        "jsonable", "executor_class": {"__class__": "Executor", "__module__": "tfx.components.statistics_gen.executor",
        "__tfx_object_type__": "class"}, "extra_flags": ["--temp_location=gs://pjm_interactive_tmp",
        "--project=dst-mlpipes"]}}'
      - --component_config
      - 'null'
      - --enable_cache
      command: [python, /tfx-src/tfx/orchestration/kubeflow/container_entrypoint.py]
      env:
      - name: WORKFLOW_ID
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''workflows.argoproj.io/workflow'']'}
      - name: KFP_POD_NAME
        valueFrom:
          fieldRef: {fieldPath: metadata.name}
      - name: KFP_NAMESPACE
        valueFrom:
          fieldRef: {fieldPath: metadata.namespace}
      envFrom:
      - configMapRef: {name: metadata-grpc-configmap, optional: true}
      image: gcr.io/dst-mlpipes/tfx_ca:latest
    inputs:
      parameters:
      - {name: pipeline-root}
    outputs:
      artifacts:
      - {name: mlpipeline-ui-metadata, path: /mlpipeline-ui-metadata.json}
    metadata:
      labels:
        add-pod-env: "true"
        pipelines.kubeflow.org/pipeline-sdk-type: tfx
  - name: tfxca
    inputs:
      parameters:
      - {name: pipeline-root}
      - {name: seed_pattern}
    dag:
      tasks:
      - name: bigqueryexamplegen
        template: bigqueryexamplegen
        arguments:
          parameters:
          - {name: pipeline-root, value: '{{inputs.parameters.pipeline-root}}'}
          - {name: seed_pattern, value: '{{inputs.parameters.seed_pattern}}'}
      - name: examplevalidator
        template: examplevalidator
        dependencies: [schemagen, statisticsgen]
        arguments:
          parameters:
          - {name: pipeline-root, value: '{{inputs.parameters.pipeline-root}}'}
      - name: pusher
        template: pusher
        dependencies: [trainer]
        arguments:
          parameters:
          - {name: pipeline-root, value: '{{inputs.parameters.pipeline-root}}'}
      - name: schemagen
        template: schemagen
        dependencies: [statisticsgen]
        arguments:
          parameters:
          - {name: pipeline-root, value: '{{inputs.parameters.pipeline-root}}'}
      - name: statisticsgen
        template: statisticsgen
        dependencies: [bigqueryexamplegen]
        arguments:
          parameters:
          - {name: pipeline-root, value: '{{inputs.parameters.pipeline-root}}'}
      - name: trainer
        template: trainer
        dependencies: [bigqueryexamplegen, schemagen]
        arguments:
          parameters:
          - {name: pipeline-root, value: '{{inputs.parameters.pipeline-root}}'}
  - name: trainer
    container:
      args:
      - --pipeline_name
      - tfxca
      - --pipeline_root
      - '{{inputs.parameters.pipeline-root}}'
      - --kubeflow_metadata_config
      - |-
        {
          "grpc_config": {
            "grpc_service_host": {
              "environment_variable": "METADATA_GRPC_SERVICE_HOST"
            },
            "grpc_service_port": {
              "environment_variable": "METADATA_GRPC_SERVICE_PORT"
            }
          }
        }
      - --beam_pipeline_args
      - '["--temp_location=gs://pjm_interactive_tmp", "--project=dst-mlpipes"]'
      - --additional_pipeline_args
      - '{}'
      - --component_launcher_class_path
      - tfx.orchestration.launcher.in_process_component_launcher.InProcessComponentLauncher
      - --serialized_component
      - '{"__class__": "NodeWrapper", "__module__": "tfx.orchestration.kubeflow.node_wrapper",
        "__tfx_object_type__": "jsonable", "_exec_properties": {"custom_config": "null",
        "eval_args": "{\n  \"num_steps\": 1000\n}", "module_file": "gs://tfxca-pipeline-artifacts/tfxca_trainer.py",
        "run_fn": null, "train_args": "{\n  \"num_steps\": 1000\n}", "trainer_fn":
        null}, "_id": "Trainer", "_inputs": {"__class__": "_PropertyDictWrapper",
        "__module__": "tfx.types.node_common", "__tfx_object_type__": "jsonable",
        "_compat_aliases": {"transform_output": "transform_graph"}, "_data": {"examples":
        {"__class__": "Channel", "__module__": "tfx.types.channel", "__tfx_object_type__":
        "jsonable", "artifacts": [], "output_key": "examples", "producer_component_id":
        "BigQueryExampleGen", "type": {"name": "Examples", "properties": {"span":
        "INT", "split_names": "STRING", "version": "INT"}}}, "schema": {"__class__":
        "Channel", "__module__": "tfx.types.channel", "__tfx_object_type__": "jsonable",
        "artifacts": [], "output_key": "schema", "producer_component_id": "SchemaGen",
        "type": {"name": "Schema"}}}}, "_outputs": {"__class__": "_PropertyDictWrapper",
        "__module__": "tfx.types.node_common", "__tfx_object_type__": "jsonable",
        "_compat_aliases": {"output": "model"}, "_data": {"model": {"__class__": "Channel",
        "__module__": "tfx.types.channel", "__tfx_object_type__": "jsonable", "artifacts":
        [], "output_key": "model", "producer_component_id": "Trainer", "type": {"name":
        "Model"}}, "model_run": {"__class__": "Channel", "__module__": "tfx.types.channel",
        "__tfx_object_type__": "jsonable", "artifacts": [], "output_key": "model_run",
        "producer_component_id": "Trainer", "type": {"name": "ModelRun"}}}}, "_type":
        "tfx.components.trainer.component.Trainer", "driver_class": {"__class__":
        "BaseDriver", "__module__": "tfx.dsl.components.base.base_driver", "__tfx_object_type__":
        "class"}, "executor_spec": {"__class__": "ExecutorClassSpec", "__module__":
        "tfx.dsl.components.base.executor_spec", "__tfx_object_type__": "jsonable",
        "executor_class": {"__class__": "GenericExecutor", "__module__": "tfx.components.trainer.executor",
        "__tfx_object_type__": "class"}, "extra_flags": ["--temp_location=gs://pjm_interactive_tmp",
        "--project=dst-mlpipes"]}}'
      - --component_config
      - 'null'
      - --enable_cache
      command: [python, /tfx-src/tfx/orchestration/kubeflow/container_entrypoint.py]
      env:
      - name: WORKFLOW_ID
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''workflows.argoproj.io/workflow'']'}
      - name: KFP_POD_NAME
        valueFrom:
          fieldRef: {fieldPath: metadata.name}
      - name: KFP_NAMESPACE
        valueFrom:
          fieldRef: {fieldPath: metadata.namespace}
      envFrom:
      - configMapRef: {name: metadata-grpc-configmap, optional: true}
      image: gcr.io/dst-mlpipes/tfx_ca:latest
    inputs:
      parameters:
      - {name: pipeline-root}
    outputs:
      artifacts:
      - {name: mlpipeline-ui-metadata, path: /mlpipeline-ui-metadata.json}
    metadata:
      labels:
        add-pod-env: "true"
        pipelines.kubeflow.org/pipeline-sdk-type: tfx
  arguments:
    parameters:
    - {name: pipeline-root, value: 'gs://tfxca-pipeline-artifacts'}
    - {name: seed_pattern, value: meni|avw2}
  serviceAccountName: pipeline-runner
